/*
 * These functions are based on the account of the elliptic curve 
 * factorization algorithm of H. Lenstra. in D. Bressoud's book
 * Factorization and primality testing, Springer Undergraduate Text, 1989,
 * 195-217.  We also draw on the account in Niven, Zuckerman and Montgomery
 * An introduction to the theory of numbers, Wiley, 1991, 261-287.
 */

define russm(a,b,c,p){
	auto t
/*
 *  input: unsigned long ints a, b, c, p, with p > 0.
 * output: a + b * c (mod p).
 * Russian Peasant multiplication algorithm. Uses the identities
 * RUSSm(a, b, 2 * c, p) = RUSSm(a, 2 * b, c, p),
 * RUSSm(a, b, c + 1, p) = RUSSm(a + b, b, c, p).
 * If a, b, c and p are less than 2^32, * so is RUSSm(a, b, c, p).
 * From H. Luneburg, "On the Rational Normal Form of * Endomorphisms",
 * B.I. WissenSchaftsverlag, Mannheim/Wien/Zurich, 1987, pp 18-19.
 * Luneburg's restriction to 2*p<2^32 removed by krm on 18/4/94.
 */
	a = a % p
	b = b % p
	c = c % p
	while (c){
		while (c%2 == 0){
			c = c/2
			t = p - b
			if (b < t){b = (2*b)}\
			else {b = (b - t)}
		}
		c=c-1
		t = p - b
		if(a < t){a=a+b}\
		else {a=a-t}
	}
	return (a)
}

define random(x){
	auto a, c, m
/*
 * input: unsigned int x, output:a "random number" a * x + c (mod m).
 * a = 1001, m = 65536*65536, c = 65;
 * From H. Luneburg, "On the Rational Normal Form of Endomorphisms",
 * B.I. WissenSchaftsverlag, Mannheim/Wien/Zurich, 1987.
 * See Knuth Vol 2, Theorem A, p. 16.
 */
	m = 2^(32)
	a = 1001
	c = 65
	return (russm(c, a, x, m))
}

define m(r,b){
	if(r>=0) return(r%b)
	if(r%b==0) return(0)
        return(r%b+b)	
}

/*  gcd(m,n) for any integers m and n */
/* Euclid's division algorithm is used. */

define g(m,n){
	auto r,b,d
	r=t(m)
	if(n==0) return(r)
        b=t(n)
        d=r%b
        while(d>0){
		r=b
                b=d
                d=r%b
        }
	return(b)
}   


/* absolute value of an integer n */

define t(n){
	if(n>=0) return(n)
	return(-n)
}

/*
 * Algorithm 14.4 , page 214, Bressoud.
 * ecfaglobal and ecfcglobal are global variables.
 */
define o(x,z,k,p,q,n){
auto i,w,c[],b,d,l,u,v,t
for(i=0;i<=20;i++)c[i]=0
i=0
w=k
while(w){
	i=i+1
	c[i]=w%2
	w=w/2
}
l=i;
ecfaglobal=x
ecfcglobal=z
b=a(x,z,p,q,n)
d=c(x,z,p,q,n)
for(i=l-1;i>=1;i--){
	u=b(x,z,ecfaglobal,ecfcglobal,b,d,p,q,n)
	v=d(x,ecfaglobal,ecfcglobal,b,d,n)
	if(c[i]==0){
	t=a(ecfaglobal,ecfcglobal,p,q,n)
	ecfcglobal=c(ecfaglobal,ecfcglobal,p,q,n)
	ecfaglobal=t
	b=u
	d=v
	}
	if(c[i]){
		t=a(b,d,p,q,n)
		d=c(b,d,p,q,n)
		b=t
		ecfaglobal=u
		ecfcglobal=v
	}
}
return(k)
}

/*
 * algorithm X_SUB_2I(r,s), page 213, Bressoud.
 */
define a(r,s,p,q,n){
auto t,g,h,i
g=r*r;h=p*s*s;i=q*s*s*s
if(m(r*(g+h)+i,n)==0){return(0)}
t=m(g-h,n)
return(m(t*t-8*r*i,n))
}

/*
 * algorithm Z_SUB_2I(r,s), page 213, Bressoud.
 */
define c(r,s,p,q,n){
auto t
t=m(r*r*r+p*r*s*s+q*(s^3),n)
if(t==0){return(0)}
return(m(4*s*t,n))
}

/*
 * algorithm X_SUB_2I_PLUS(r,s,u,v), page 213, Bressoud.
 */
define b(x,z,r,s,u,v,p,q,n){
auto f,g
f=m(r*u-p*s*v,n)
g=m(q*s*v*(r*v+s*u),n)
if(x){return(m(z*(f*f-4*g),n))}
f=m(4*q*s*v*s*v,n)
g=m(2*(p*s*v+r*u)*(u*s+r*v),n)
return(m(f+g,n))
}

/*
 * algorithm Z_SUB_2I_PLUS(r,s,u,v), page 214, Bressoud.
 */
define d(x,r,s,u,v,n){
auto t
t=m(u*s-r*v,n)
if(x){return(m(x*t*t,n))}
return(m(t*t,n))
}

/*
 * calculating the order of (x,y,z) on the elliptic curve y^2=x^3+p*x+q,
 * mod n, a prime.
 * 4*p^3+27*q^2 nonzero mod n.
 * See page 205 Bressoud.
 */

define r(x,z,p,q,n){
auto d,k
k=1
ecfcglobal=1
d=4*p^3+27*q^2 
if(d%n==0){print "discriminant=";return(0)}
while (1){
	o(x,z,k,p,q,n)
	if(ecfcglobal==0)break
	k=k+1
	}
	"order = ";return(k--)
}

/*
 * modified algorithm 14.5, page 216, Bressoud.
 * This program uses the elliptic curve y^2=x^3-Ax+A, as in Niven,
 * Zuckerman, Montgomery, page 285.
 * It is assumed that m <= 588 here.
 * n is the composite number, m is the number of prime powers used in
 * exponentiation on the elliptic curve, p is the starting seed for the
 * random curve y^2=x^3-A*x+A mod n.
 */

define ecf(n,m,p){
auto g,p[],k,t,i,l,w
w=m-10
if(m>588){
"m > ";return(588)
}
l=1
p[0]=2
p[1]=3
p[2]=2
p[3]=5
p[4]=7
p[5]=3
p[6]=2
p[7]=11
p[8]=13
p[9]=4
p[10]=17
p[11]=19
p[12]=23
p[13]=2
p[14]=3
p[15]=29
p[16]=31
p[17]=5
p[18]=37
p[19]=41
p[20]=43
p[21]=47
p[22]=2
p[23]=53
p[24]=59
p[25]=61
p[26]=6
p[27]=67
p[28]=71
p[29]=73
p[30]=79
p[31]=4
p[32]=83
p[33]=89
p[34]=97
p[35]=101
p[36]=103
p[37]=107
p[38]=109
p[39]=113
p[40]=2
p[41]=3
p[42]=127
p[43]=7
p[44]=131
p[45]=137
p[46]=139
p[47]=149
p[48]=151
p[49]=157
p[50]=163
p[51]=167
p[52]=2
p[53]=173
p[54]=179
p[55]=181
p[56]=191
p[57]=193
p[58]=197
p[59]=199
p[60]=211
p[61]=223
p[62]=227
p[63]=229
p[64]=233
p[65]=239
p[66]=241
p[67]=5
p[68]=251
p[69]=8
p[70]=257
p[71]=263
p[72]=269
p[73]=271
p[74]=277
p[75]=281
p[76]=283
p[77]=2
p[78]=293
p[79]=307
p[80]=311
p[81]=313
p[82]=317
p[83]=331
p[84]=337
p[85]=3
p[86]=347
p[87]=349
p[88]=353
p[89]=359
p[90]=2
p[91]=367
p[92]=373
p[93]=379
p[94]=383
p[95]=389
p[96]=397
p[97]=401
p[98]=409
p[99]=419
p[100]=421
p[101]=431
p[102]=433
p[103]=439
p[104]=443
p[105]=449
p[106]=457
p[107]=461
p[108]=463
p[109]=467
p[110]=479
p[111]=487
p[112]=491
p[113]=499
p[114]=503
p[115]=509
p[116]=9
p[117]=521
p[118]=523
p[119]=2
p[120]=541
p[121]=547
p[122]=557
p[123]=563
p[124]=569
p[125]=571
p[126]=577
p[127]=587
p[128]=593
p[129]=599
p[130]=601
p[131]=607
p[132]=613
p[133]=617
p[134]=619
p[135]=4
p[136]=631
p[137]=641
p[138]=643
p[139]=647
p[140]=653
p[141]=659
p[142]=661
p[143]=673
p[144]=677
p[145]=683
p[146]=691
p[147]=701
p[148]=709
p[149]=719
p[150]=727
p[151]=6
p[152]=733
p[153]=739
p[154]=743
p[155]=751
p[156]=757
p[157]=761
p[158]=769
p[159]=773
p[160]=787
p[161]=797
p[162]=809
p[163]=811
p[164]=821
p[165]=823
p[166]=827
p[167]=829
p[168]=839
p[169]=2
p[170]=853
p[171]=857
p[172]=859
p[173]=863
p[174]=877
p[175]=881
p[176]=883
p[177]=887
p[178]=907
p[179]=911
p[180]=919
p[181]=929
p[182]=937
p[183]=941
p[184]=947
p[185]=953
p[186]=2
p[187]=967
p[188]=971
p[189]=977
p[190]=983
p[191]=991
p[192]=997
p[193]=1009
p[194]=1013
p[195]=1019
p[196]=1021
p[197]=10
p[198]=1031
p[199]=1033
p[200]=1039
p[201]=1049
p[202]=1051
p[203]=1061
p[204]=1063
p[205]=1069
p[206]=1087
p[207]=1091
p[208]=1093
p[209]=1097
p[210]=1103
p[211]=1109
p[212]=1117
p[213]=1123
p[214]=1129
p[215]=1151
p[216]=1153
p[217]=1163
p[218]=1171
p[219]=1181
p[220]=1187
p[221]=1193
p[222]=1201
p[223]=1213
p[224]=1217
p[225]=1223
p[226]=1229
p[227]=1231
p[228]=1237
p[229]=1249
p[230]=1259
p[231]=1277
p[232]=1279
p[233]=1283
p[234]=1289
p[235]=1291
p[236]=1297
p[237]=1301
p[238]=1303
p[239]=1307
p[240]=1319
p[241]=1321
p[242]=1327
p[243]=3
p[244]=1361
p[245]=1367
p[246]=2
p[247]=1373
p[248]=1381
p[249]=1399
p[250]=1409
p[251]=1423
p[252]=1427
p[253]=1429
p[254]=1433
p[255]=1439
p[256]=1447
p[257]=1451
p[258]=1453
p[259]=1459
p[260]=1471
p[261]=1481
p[262]=1483
p[263]=1487
p[264]=1489
p[265]=1493
p[266]=1499
p[267]=1511
p[268]=1523
p[269]=1531
p[270]=1543
p[271]=1549
p[272]=1553
p[273]=1559
p[274]=1567
p[275]=1571
p[276]=1579
p[277]=1583
p[278]=1597
p[279]=1601
p[280]=1607
p[281]=1609
p[282]=1613
p[283]=1619
p[284]=1621
p[285]=1627
p[286]=1637
p[287]=1657
p[288]=1663
p[289]=1667
p[290]=1669
p[291]=2
p[292]=1693
p[293]=1697
p[294]=1699
p[295]=1709
p[296]=1721
p[297]=1723
p[298]=1733
p[299]=1741
p[300]=1747
p[301]=1753
p[302]=1759
p[303]=1777
p[304]=1783
p[305]=1787
p[306]=1789
p[307]=1801
p[308]=1811
p[309]=1823
p[310]=1831
p[311]=1847
p[312]=2
p[313]=1861
p[314]=1867
p[315]=1871
p[316]=1873
p[317]=1877
p[318]=1879
p[319]=1889
p[320]=1901
p[321]=1907
p[322]=1913
p[323]=1931
p[324]=1933
p[325]=1949
p[326]=1951
p[327]=1973
p[328]=1979
p[329]=1987
p[330]=1993
p[331]=1997
p[332]=1999
p[333]=2003
p[334]=2011
p[335]=2017
p[336]=2027
p[337]=2029
p[338]=2039
p[339]=11
p[340]=2053
p[341]=2063
p[342]=2069
p[343]=2081
p[344]=2083
p[345]=2087
p[346]=2089
p[347]=2099
p[348]=2111
p[349]=2113
p[350]=2129
p[351]=2131
p[352]=2137
p[353]=2141
p[354]=2143
p[355]=2153
p[356]=2161
p[357]=2179
p[358]=7
p[359]=3
p[360]=2203
p[361]=2207
p[362]=2
p[363]=2213
p[364]=2221
p[365]=2237
p[366]=2239
p[367]=2243
p[368]=2251
p[369]=2267
p[370]=2269
p[371]=2273
p[372]=2281
p[373]=2287
p[374]=2293
p[375]=2297
p[376]=2309
p[377]=2311
p[378]=2333
p[379]=2339
p[380]=2341
p[381]=2347
p[382]=2351
p[383]=2357
p[384]=2371
p[385]=2377
p[386]=2381
p[387]=2383
p[388]=2389
p[389]=2393
p[390]=2399
p[391]=4
p[392]=2411
p[393]=2417
p[394]=2423
p[395]=2437
p[396]=2441
p[397]=2447
p[398]=2459
p[399]=2467
p[400]=2473
p[401]=2477
p[402]=2503
p[403]=2521
p[404]=2531
p[405]=2539
p[406]=2543
p[407]=2549
p[408]=2551
p[409]=2557
p[410]=2579
p[411]=2591
p[412]=2593
p[413]=2609
p[414]=2617
p[415]=2621
p[416]=2633
p[417]=2647
p[418]=2657
p[419]=2659
p[420]=2663
p[421]=2671
p[422]=2677
p[423]=2683
p[424]=2687
p[425]=2689
p[426]=2693
p[427]=2699
p[428]=2707
p[429]=2711
p[430]=2713
p[431]=2719
p[432]=2729
p[433]=2731
p[434]=2741
p[435]=2749
p[436]=2753
p[437]=2767
p[438]=2777
p[439]=2789
p[440]=2791
p[441]=2797
p[442]=2801
p[443]=2803
p[444]=2
p[445]=2819
p[446]=2833
p[447]=2837
p[448]=2843
p[449]=2851
p[450]=2857
p[451]=2861
p[452]=2879
p[453]=2887
p[454]=2897
p[455]=2903
p[456]=2909
p[457]=2917
p[458]=2927
p[459]=2939
p[460]=2953
p[461]=2957
p[462]=2963
p[463]=2969
p[464]=2971
p[465]=2999
p[466]=3001
p[467]=3011
p[468]=3019
p[469]=3023
p[470]=3037
p[471]=3041
p[472]=3049
p[473]=3061
p[474]=3067
p[475]=3079
p[476]=3083
p[477]=3089
p[478]=3109
p[479]=3119
p[480]=3121
p[481]=5
p[482]=3137
p[483]=3163
p[484]=3167
p[485]=3169
p[486]=3181
p[487]=3187
p[488]=3191
p[489]=3203
p[490]=3209
p[491]=3217
p[492]=3221
p[493]=3229
p[494]=3251
p[495]=3253
p[496]=3257
p[497]=3259
p[498]=3271
p[499]=3299
p[500]=3301
p[501]=3307
p[502]=3313
p[503]=3319
p[504]=3323
p[505]=3329
p[506]=3331
p[507]=3343
p[508]=3347
p[509]=3359
p[510]=3361
p[511]=3371
p[512]=3373
p[513]=3389
p[514]=3391
p[515]=3407
p[516]=3413
p[517]=3433
p[518]=3449
p[519]=3457
p[520]=3461
p[521]=3463
p[522]=3467
p[523]=3469
p[524]=2
p[525]=3491
p[526]=3499
p[527]=3511
p[528]=3517
p[529]=3527
p[530]=3529
p[531]=3533
p[532]=3539
p[533]=3541
p[534]=3547
p[535]=3557
p[536]=3559
p[537]=3571
p[538]=3581
p[539]=3583
p[540]=3593
p[541]=3607
p[542]=3613
p[543]=3617
p[544]=3623
p[545]=3631
p[546]=3637
p[547]=3643
p[548]=3659
p[549]=3671
p[550]=3673
p[551]=3677
p[552]=3691
p[553]=3697
p[554]=3701
p[555]=3709
p[556]=3719
p[557]=2
p[558]=3727
p[559]=3733
p[560]=3739
p[561]=3761
p[562]=3767
p[563]=3769
p[564]=3779
p[565]=3793
p[566]=3797
p[567]=3803
p[568]=3821
p[569]=3823
p[570]=3833
p[571]=3847
p[572]=3851
p[573]=3853
p[574]=3863
p[575]=3877
p[576]=3881
p[577]=3889
p[578]=3907
p[579]=3911
p[580]=3917
p[581]=3919
p[582]=3923
p[583]=3929
p[584]=3931
p[585]=3943
p[586]=3947
p[587]=3967
p[588]=3989
while(p){
	"elliptic curve ";p
	g=g(4*p*p*p-27,n)
	if(g!=1){
		"discriminant not relatively prime to n
		"
		if(g!=n){
			"found a factor:\n"
			return(g)
		}
	}
	if(g==1){
		ecfaglobal=1;ecfcglobal=1
		k=1
		while(k<=m){
			"k = ";k
			if (k <= w){
				for (i=1;i<=10;i++){
					t=o(ecfaglobal,ecfcglobal,p[k],-p,p,n)
					k=k+1
				}
			}\
			else{
				t=o(ecfaglobal,ecfcglobal,p[k],-p,p,n)
				k=k+1
			}
			g=g(ecfcglobal,n)
			if(g!=1){
				if(g!=n){
				"elliptic curve number ";p
				print "found a factor:\n"
				l=0
				break
				}
			}
		}
	}
	if(l==0)break
	if(p<0)p= -p
	p=random(p)
}
return(g)
}

/* starting with a seed x, we generate n random numbers */
define randomm(x,n){
auto i,j
j=n-1
for(i=0;i<j;i++){
	(x=random(x))
}
return(random(x))
}
