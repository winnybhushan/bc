/* gnubc program : patz */
/* Needs squareroot */

/* Typing pn(a[],n) returns p[n], where
 * p[0]=a[0],p[1]=a[0]*a[1]+1,p[i+1]=a[i+1]*p[i]+p[i-1] if i >= 1.
 * Typing qn(a[],n) returns q[n], where
 * q[0]=1,q[1]=a[1],q[i+1]=a[i+1]*q[i]+q[i-1] if i >= 1.
 * Hence pn/qn is the value of the simple continued fraction
 * [a[0];a[1],...,a[n]].
 */
define pn(a[],n){
	auto x,y,z,i
        if (n == 0)return(a[0])
        if(n==1)return(a[0]*a[1]+1)
        x=a[0];y=a[0]*a[1]+1
        for(i=2;i<=n;i++){
          z=a[i]*y+x
	  x=y
	  y=z
        }
        return(z)
}

define qn(a[],n){
        auto x,y,z,i
        if(n==0)return(1)
        if(n==1)return(a[1])
        x=1;y=a[1]
        for(i=2;i<=n;i++){
	    z=a[i]*y+x
	    x=y
	    y=z
        }
        return(z)
}

/*
 * This program finds the continued fraction expansion of a
 * quadratic irrational (u+tsqrt(d))/v, where d is not a square,
 * t,u,v integers, v nonzero.
 * After converting to (U+sqrt(D))/V, where V divides D-U^2,
 */
/* sign of an integer a */
/* sign(a)=1,-1,0, according as a>0,a<0,a=0 */

define sign(a){
	if(a>0) return(1)
	if(a<0) return(-1)
	return(0)
}

/* absolute value of an integer n */

define abs(n){
	if(n>=0) return(n)
	return(-n)
}

/*  mod(a,b)=the least non-negative remainder when an integer a is divided by a
 positive integer b */

define mod(a,b){
	auto c
	c=a%b
	if(a>=0) return(c)
	if(c==0) return(0)
        return(c+b)	
}

/* int(a,b)=integer part of a/b, a, b integers, b != 0 */

define int(a,b){
	auto c
	c=sign(b)
	a=a*c
	b=b*c
	return((a-mod(a,b))/b)
}

/*
 * This is a function for finding the period of the continued fraction
 * expansion of reduced quadratic irrational a=(u+sqrt(d))/v.
 * Here d is non-square, 1<(u+sqrt(d))/v, -1<(u-sqrt(d))/v<0.
 * The algorithm also assumes that v divides d-u*u and is based on K. Rosen,
 * Elementary Number theory and its applications, p.379-381 and Knuth's The art
 * of computer programming, Vol. 2, p. 359.  0 is returned if a is not reduced.
 */
define period(d,u,v,i){
	auto r,s,t,f,j,k,temp
	f=sqrt(d)
	if(u<=0){"a is not reduced: u<=0:";return(0)}
	if(v<=0){"a is not reduced: v<=0:";return(0)}
	if(u+f<v){"a is not reduced: a<1:";return(0)}
	if(u+v<= f){"a is not reduced: a'<=-1:";return(0)}
	if(f<u){"a is not reduced: a'>0:";return(0)}
	k=d-u*u
	if(k%v!=0){"v does not divide d - u*u:";return(0)}
	s=v
	r=u
	a_surd_length=i
/* i is created by surd(d,t,u,v) below and indexes the ith 
   convergent of (u+t*sqrt(d))/v */
	for(j=i;1;j++){
	   a=(f+u)/v
           /*  print "a[",j,"]=",a,"\n" */
	   a_surd[j]=a
	   u=a*v-u
	   temp=v
	   v=(d-u*u)/v
           u_surd[j+1]=u
           v_surd[j+1]=v
           if(u==r && v==s){
             t=j+1-i
	     a_surd_length=a_surd_length+t
             return(t)
           /* the continued fraction has period length j+1-i */
           }
	}
}

/*
 * This function uses the continued fraction algorithm expansion in K. Rosen,
 * Elementary Number theory and its applications,p.379-381 and Knuth's
 * The art of computer programming, Vol. 2, p. 359. It locates the first reduced
 * complete quotient and then uses the function period(d,u,v,i,flag)
 * to locate the period of the continued fraction expansion.
 */

define surd(d,t,u,v,print_flag){
	auto a,c,e,g,f,i,j,k,w,z,con_length
	c=d;g=u;e=v
	if(v==0){
           print "v="
           return(0)
        }
	f=sqrt(d)
	if(f*f==d){
           print "d is the square of "
           return(f)
        }
	if(t==0){
           print "t = "
           return(0)
        }
	z=sign(t)
	u=u*z
	v=v*z
	d=d*t*t
	w=abs(v)
	if((d-u*u)%w!=0){
           d=d*v*v
	   u=u*w
	   v=v*w
	}
	f=sqrt(d)
	for(j=0;1;j++){
	    u_surd[j]=u
	    v_surd[j]=v
            if(v>0){
	       if(u>0){
                  if(u<= f){
                     if(f<u+v){
                        if(v-u <=f){
                       	 /* (u+sqrt(d))/v is reduced */
                           i=j
                           pre_period_length=i
                           l=period(d,u,v,i)
                           if(print_flag){
                              print "period:\n"
                           }
                           if(l%2){
                              l=period(d,u,v,j+l)
                              if(print_flag){
                                 print "second period:\n"
                              }
                           }
                           con_length=a_surd_length-1
                           for(k=0;k<=con_length;k++){
                               p_surd[k]=pn(a_surd[],k)
                               q_surd[k]=qn(a_surd[],k)
                           }
                           if(print_flag){
                              print "partial quotients:\n"
                              for(k=0;k<=con_length;k++){
                                  if(k==pre_period_length || l%2 && k==pre_period_length+l){
                                     print "period:\n"
                                  }
                                  print "a[",k,"]=",a_surd[k],"\n"
                              }
                              print "complete quotients:\n"
                              for(k=0;k<=a_surd_length;k++){
                                  print "(P[",k,"]+sqrt(",d,"))/Q[",k,"]=(",u_surd[k],"+sqrt(",d,"))/",v_surd[k],"\n"
                              }
                              print "convergents:\n"
                              for(k=0;k<=con_length;k++){
                                  print "A[",k,"]/B[",k,"]=",p_surd[k],"/",q_surd[k],"\n"
                              }
                              print "cfrac has period length ",l,"\n"
                           }
                           return(l)
                        }
		     }
                  }
	       }
            }
            if(v>0){
               a=int(f+u,v)
            }
            if(v<0){
               a=int(f+u+1,v)
            }
            /*print "a[",j,"]=",a,"\n" */
            a_surd[j]=a
            u=a*v-u
            v=int(d-u*u,v)
        }
}

/* This finds fundamental solutions for the diophantine equation
 * x^2-dy^2=n, d>0, d not a perfect square. We only find the fundamental 
 * solutions for classes P with 0<=P<=|n|/2.
 */
define patz(d,n,print_flag){
	auto a,b,k,q0,s,t,period_length,temp,g1_surd,g2_surd,f1,f2

	q0=abs(n)
        s=sqroot(d,q0,0)
        /* s=0 means no solutions of x^2=d (mod |n|) */
        /* If s>0, we get all solutions x, 0<=x<=|n|/2 in the form
         * solution[0],...,solution[numbr-1]
         */
	if(s==0){
	   print "x^2=",d," mod(",n,") has no solution\n"
           return
	}
	/* Now to test the cfrac of each of w[j]=(-solution[j]+\sqrt{D})/q0
           to see if v_surd[j]=(-1)^j*sign(n) holds for some j in
           1<=j<=t+l, where l is the period of 
           w[j]=[a_surd[0],...,a_surd[t];a_surd[t+1],...,a_surd[t+l]]
           and t=pre_period_length.
         */
	for(k=0;k<numbr;k++){
            print "processing omega[",k,"]="
            print "(",-solution[k],"+sqrt(",d,")/",q0,"\n"
            period_length=surd(d,1,-solution[k],q0,print_flag)
            temp=pre_period_length+period_length
            if(period_length%2){
               temp=temp+period_length
            }
            for(a=1;a<=temp;a++){
                temp1=(-1)^a*sign(n)
                if(v_surd[a]==temp1){
                   f1=q_surd[a-1]
                   g1_surd=q0*p_surd[a-1]+solution[k]*q_surd[a-1]
                   print "solution: class P=",solution[k],"\n"
                   print " (x,y)=(",g1_surd,",",q_surd[a-1],")\n"
                   break
                }
            }
            if(a==temp+1){
               print "P=",solution[k]," yields no solution\n"
               continue /* process solution[k+1] */
	    }
            if(solution[k]==0){
               print "Fundamental solution: ambiguous class P=0,\n"
               print "(x,y)=(",g1_surd,",",q_surd[a-1],")\n"
            }
            if(solution[k]!=0){
               print "processing omega*[",k,"]=(",-solution[k],"-sqrt(",d,")/",q0,"\n"
               period_length=surd(d,-1,-solution[k],q0,print_flag)
               temp=pre_period_length+period_length
               if(period_length%2){
                  temp=temp+period_length
               }
	       for(a=1;a<=temp;a++){
                   temp1=(-1)^(a+1)*sign(n)
		   if(v_surd[a]==temp1){
                      f2=q_surd[a-1]
                      g2_surd=q0*p_surd[a-1]+solution[k]*q_surd[a-1]
                      print "solution: class P=",solution[k]
                      print ", (x,y)=(",g2_surd,",",q_surd[a-1],")\n"
                      break
                   }
               }
	       print "Fundamental solution: "
               if(2*solution[k]==q0){
                  print "ambiguous class "
               }else{
                  print "class "
               }
               print "P=",solution[k],", (x,y)=("
               if(f1<=f2){
                  print g1_surd,",",f1
               }else{
                  print g2_surd,",",f2
               }
               print ")\n"
            }
	}/* end of for k loop */
        return
}

/* calculate_n(a,b,c,alpha,gamma,n) calulates the n on page 259, equation (2.5)
 * of the paper below.
 * It is only used for printing.
 */
define calculate_n(a,b,c,alpha,gamma,n){
auto beta,delta,q0,q00,m,tmp1,tmp2,tmp5,tmp6
        q0=abs(n)
	q00=2*q0
	beta=-gcd2(alpha,gamma)
	delta= gcd1(alpha,gamma)
   /*     tmp1=((2*a)*alpha+b*gamma)*beta
	tmp2=(b*alpha+(2*c)*gamma)*delta
    */
        tmp1=(2*a)*alpha*beta
        tmp2=2*c*gamma*delta
        tmp5=b*alpha*delta
        tmp6=b*beta*gamma
        m=tmp1+tmp2+tmp5+tmp6
	m=mod(m,q00)
        if(m>q0){
           m=m-q00
        }
        return(m)
}

/* binary(a,b,c,n,print_flag) tests the diophantine equation
 * ax^2+bxy+cy^2=n for solubility. Here d=b^2-4ac>0 and is not a perfect
 * square. Also n is non-zero and gcd(a,n)=1. 
 * In the case of solubility, the solution (x,y) in each class, 
 * with least y is obtained.
 * With print_flag =1, we get verbose output.
 * Printing of the fundamental solutions is suppressed if relprime_flag=0.
 * (for use in binary1.)
 * See K.R. Matthews, 'The Diophantine equation ax^2+bxy+cy^2=N, 
 * D=b^2-4ac>0', J. de The'orie des Nombres de Bordeaux 14 (2002) 257-270.
 * The test for necessity is simplified by the observation that 
 * if Q_n=2(-1)^nN/|N| occurs in the cfrac of omega=(-n+sqrt(d))/q, 
 * then Q_m=2(-1)^{m+1}N/|N| occurs in the cfrac of omega*=(-n-sqrt(d))/q.
 */

define binary0(a,b,c,n,print_flag,relprime_flag){
auto no_of_solutions, d,i,k,m,mm,q,q0,q00,s,ss,t,period_length,temp,g1_surd,g2_surd,f1,f2,u,v,x,y

	d=b^2-4*a*c
	q0=abs(n)
        q00=2*q0
        q=2*a*q0
        s=quadratic(a,b,c,q0,0)
        /* s=0 means no solutions of ax^2+bx+c=0 (mod |n|) */
        /* If s>0, we get all solutions x, 0<=x<|n| in the form
         * quadratic_solution[0],...,quadratic_solution[s-1]
         */
	if(s==0){
	   print "ax^2+bx+c=0 mod(n) has no solution\n"
           return(0)
	}
	/* With m=2*a*quadratic_solution[k]+b, to test the cfrac of each of 
           w[j]=(-m+\sqrt{d})/q
           to see if v_surd[j]=(-1)^j*2**sign(n) holds for some j in
           1<=j<=t+l, where l is the period of 
           w[j]=[a_surd[0],...,a_surd[t];a_surd[t+1],...,a_surd[t+l]]
           and t=pre_period_length.
         */
        no_of_solutions=0
	for(k=0;k<s;k++){
	    m=2*a*quadratic_solution[k]+b
            if(print_flag){
               print "processing omega[",k,"]="
               print "(",-m,"+sqrt(",d,")/",q,"\n"
            }
            period_length=surd(d,1,-m,q,print_flag)
            temp=pre_period_length+period_length
            if(period_length%2){
               temp=temp+period_length
            }
            for(i=1;i<=temp;i++){
                temp1=(-1)^i*2*sign(n)
                if(v_surd[i]==temp1){
                   solution_flag=1
                   f1=q_surd[i-1]
                   g1_surd=q0*p_surd[i-1]+quadratic_solution[k]*q_surd[i-1]
                   mm=calculate_n(a,b,c,g1_surd,f1,n)
                   if(print_flag){
                      print "solution: class n=",mm," (mod ",q00,"):"
                      print " (x,y)=(",g1_surd,",",f1,")\n"
                   }
                   break
                }
            }
            if(print_flag){
	       print "processing omega*[",k,"]=(",-m,"-sqrt(",d,")/",q,"\n"
            }
            period_length=surd(d,-1,-m,q,print_flag)
            temp=pre_period_length+period_length
            if(period_length%2){
	       temp=temp+period_length
            }
            for(i=1;i<=temp;i++){
	        temp1=(-1)^(i+1)*2*sign(n)
	        if(v_surd[i]==temp1){
	           f2=q_surd[i-1]
	           g2_surd=q0*p_surd[i-1]+quadratic_solution[k]*q_surd[i-1]
	           if(print_flag){
                      print "solution: class n=",mm," (mod ",q00,"):"
		      print ", (x,y)=(",g2_surd,",",f2,")\n"
	           }
	           break
	        }
            }
            if(i==temp+1){
               continue /* exiting the for k loop */
	    }
            if(f1<=f2){
               u=g1_surd
               v=f1
            }else{
               u=g2_surd
               v=f2
            }
            if(d==5 && a*n<0){
	       ss=pre_period_length
	       if(ss>1){
                  tmp1=p_surd[ss-1]-p_surd[ss-2]
                  tmp2=q_surd[ss-1]-q_surd[ss-2]
                  x=tmp1*q0+quadratic_solution[k]*tmp2
               }else{
                  x=p_surd[0]-1
                  tmp2=q_surd[0]
                }
                if(print_flag){
                   print "exceptional solution: class n=",mm," (mod ",q00,"):"
                   print ", (x,y)=(",x,",",tmp2,")\n"
                }
            }
if(relprime_flag){
	    print "Fundamental solution: "
            print "class n=",mm," (mod ",q00,"):"
}
            if(d!=5 || d==5 && a*n>=0){
               fund_x[no_of_solutions]=u
               fund_y[no_of_solutions]=v
if(relprime_flag){
               print u,",",v
}
            }else{
               if(v<=y){
                  fund_x[no_of_solutions]=u
                  fund_y[no_of_solutions]=v
if(relprime_flag){
                  print u,",",v
}
	       }else{
                  fund_x[no_of_solutions]=x
                  fund_y[no_of_solutions]=tmp2
if(relprime_flag){
                  print x,",",tmp2
}
               }
            }
if(relprime_flag){
            print ")\n"
}
            no_of_solutions=no_of_solutions+1
	}/* end of for k loop */
        return(no_of_solutions)
}

/* binary1(a,b,c,n,print_flag) deals with the more general case of solving
 * ax^2+bxy+cy^2=n, where gcd(a,n) may be >1. Again we assume d=b^2-4ac>0
 * and that d is not a square. Also we assume gcd(a,b,c)=1.
 * The number r of solution classes is returned.
 * verbose output if print_flag=1.
 * Printing of fundamental solutions is suppressed if gcd(a,n)>1.
 */ 
define binary1(a,b,c,n,print_flag){
        auto aa,bb,cc,i,q00,mm,r,s,tmp1,tmp2,tmp3,tmp4
	if(gcd(a,n)==1){
           r=binary0(a,b,c,n,print_flag,1)
           return(r)
	}
        /* Now we calculate aa,bb,cc, where ax^2+bxy+cy^2 is 
         * transformed into aaX^2+bbXY+ccY^2 under the transformation
         * x=alpha*X+beta*Y, y=gamma*X+delta*Y.
         */
         q00=2*abs(n)
         s=gauss(a,b,c,n)
	 aa=gauss_m
         gauss_delta=gcd1(gauss_alpha,gauss_gamma)
         gauss_beta= -gcd2(gauss_alpha,gauss_gamma)
         if(!print_flag){
	   print "(alpha,gamma)=(",gauss_alpha,",",gauss_gamma,")\n"
	   print "(beta,delta)=(",gauss_beta,",",gauss_delta,")\n"
         }
         tmp1=a*gauss_beta*gauss_beta
         tmp2=b*gauss_beta*gauss_delta
         tmp3=c*gauss_delta*gauss_delta
         tmp4=tmp1+tmp2
         cc=tmp4+tmp3
         tmp1=2*a*gauss_alpha*gauss_beta
         tmp2=2*c*gauss_gamma*gauss_delta
         tmp3=b*gauss_alpha*gauss_delta
         tmp4=b*gauss_beta*gauss_gamma
         bb=tmp1+tmp2+tmp3+tmp4
         if(!print_flag){
            print "(aa,bb,cc)=(",aa,",",bb,",",cc,")\n"
         }
         r=binary0(aa,bb,cc,n,print_flag,0)
         /* replace 0 by 1 to print fundamentla solutions for reduced
          * case gcd(aa,n)=1.
          */
         if(r==0){
           return(0)
         }
         /* this creates arrays of fundamental solutions:
          * fund_x[0],...,fund_x[r-1] and
          * fund_y[0],...,fund_y[r-1].
          */
	 for(i=0;i<r;i++){
	     tmp1=gauss_alpha*fund_x[i]
	     tmp2=gauss_beta*fund_y[i]
	     tmp3=gauss_gamma*fund_x[i]
print "tmp3=",tmp3,"\n"
	     tmp4=gauss_delta*fund_y[i]
print "tmp4=",tmp4,"\n"
             fund_x[i]=tmp1+tmp2
             fund_y[i]=tmp3+tmp4
             mm=calculate_n(a,b,c,fund_x[i],fund_y[i],n)
	     print "solution: "
             print "class n=",mm," (mod ",q00,"): (x,y)=("
             print fund_x[i],",",fund_y[i]
             print ")\n"
         }
         return(r)
}

/* gauss(a,b,c,n) takes a triple gcd(a,b,c)=1 and |n|>1 and produces
 * (x,y)=(gauss_alpha,gauss_gamma) and an m=gauss_m such that ax^2+bxy+cy^2=m, 
 * gcd(m,n)=1. See L.-K. Hua 'Introduction to number theory', 311-312.
 */
define gauss(a,b,c,n){
       auto absn,e,g,i,s,t,tmp1,tmp2,xx[],yy[]

       absn=abs(n)
       e=omega(absn)
       for(i=0;i<e;i++){
	   tmp1=mod(a,qglobal[i])
	   tmp2=mod(c,qglobal[i])
           s=sign(tmp1)
           t=sign(tmp2)
           if(s){
	      xx[i]=1
	      yy[i]=0
           }
           if(s==0 && t){
	      xx[i]=0
	      yy[i]=1
           }
           if(s==0 && t==0){
	      xx[i]=1
	      yy[i]=1
           }
       }
       tmp1=chinesea(xx[],qglobal[],e)
       tmp2=chinesea(yy[],qglobal[],e)
       g=gcd(tmp1,tmp2)
       gauss_alpha=int(tmp1,g)
       gauss_gamma=int(tmp2,g)
       tmp1=a*gauss_alpha*gauss_alpha
       tmp2=b*gauss_alpha*gauss_gamma
       tmp3=c*gauss_gamma*gauss_gamma
       tmp4=tmp1+tmp2
       gauss_m=tmp4+tmp3
       return
}

/* binary suppresses printing of intermediate steps.
 * Replace 0 by 1 to get verbose output.
 */
define binary(a,b,c,n){
	return(binary1(a,b,c,n,0))
}
