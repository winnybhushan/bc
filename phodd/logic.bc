### Logic.BC -  Do bitwise functions with GNU bc

# Twos complement is assumed for negative numbers
#  this avoids awkward problems like negative zero

## Word size handling

# Global variable like 'scale' or 'length'
#  When zero, bitwidth is assumed to be infinite
bitwidth=0

# to be used by functions reliant on bitwidth
define checkbitwidth_() {
  auto os;os=scale;scale=0;bitwidth/=1;scale=os
  if(bitwidth<0){
    print "Negative bitwidth, set to 0\n"
    bitwidth=0
  }
  return 0;
}

# returns bitwidth of a variable
#  (is a simplified version of digits() function in digits.bc)
define bitwidth(x) {
  auto os,p,c;
  os=scale;scale=0;x/=1
   if(x<0)x*=-1
   c=0;p=1;while(p<=x){c+=1;p*=2}
  scale=os;return(c)
}

# cast signed values into unsigned values
define unsign(x) {
  auto os,z; x+=checkbitwidth_()
  os=scale;scale=0
  x/=1
  if(x<0){
    if(bitwidth==0){
      x+=2^(bitwidth(x)+1)
    }else{
      x+=2^(bitwidth+1)
    }
  }
  if(bitwidth)x%=2^bitwidth
  scale=os;return x;
}

# cast unsigned values into signed values
define resign(x) {
  auto os,t; x+=checkbitwidth_()
  os=scale;scale=0
  x/=1
  if(bitwidth==0||x<0){scale=os;return x}
    # can't do anything when bitwidth is infinite or x already has a sign!
  x%=(t=2^bitwidth)
  if(x>=t/2)x-=t
  scale=os;return x;
}

## Common bitwise

# Perform a bitwise logical NOT of x
#  not the same as removing the sign!
define not(x) {
  return -1-x
}

# Perform a bitwise logical AND of x and y
define and(x,y) {
 auto n,z,t,os;
 os=scale;scale=0
 n=0;x/=1;y/=1
 if(x<0){
   if(y<0){scale=os;return -1-or(-1-x,-1-y)}# not(or(not(x),not(y)))
   x=-1-x;n=1
 }
 if(y<0){t=-1-y;y=x;x=t;n=1}
 z=0;t=1;while(x||y){
  if(x%2!=n&&y%2)z+=t
  t*=2;x/=2;y/=2
 }
 scale=os;return (z)
}

# Perform a bitwise logical OR of x and y
define or(x,y) {
 auto z,t,a,b,c,os;
 os=scale;scale=0
 x/=1;y/=1
 if(x<0||y<0){scale=os;return -1-and(-1-x,-1-y)}# not(and(not(x),not(y)))
 z=0;t=1;while(x||y){
  if((c=a=x%4)!=(b=y%4)){c=a+b;if(c>3)c=3}
  z+=t*c
  t*=4;x/=4;y/=4
 }
 scale=os;return (z)
}

  ## NB: and() and or() are mutually reliant
  ##     though not mutually recursive
  ##     Both could also be reliant on not()
  ##     but this has be avoided

# Perform a bitwise logical EXCLUSIVE-OR of x and y
define xor(x,y) {
 auto n,z,t,a,b,c,os;
 os=scale;scale=0
 n=0;x/=1;y/=1
 if(x<0){x=-1-x;n=!n}
 if(y<0){y=-1-y;n=!n}
 z=0;t=1;while(x||y){
  c=(a=x%4)+(b=y%4) # doing calculations in
  if(!c%2)c=a+4-b   # base 4 is faster
  z+=t*(c%4)
  t*=4;x/=4;y/=4
 }
 if(n)z=-1-z
 scale=os;return (z)
}

## Bit shifting

# Reverse bits in x
define bitrev(x) {
 auto os,z,w; x+=checkbitwidth_()
 os=scale;scale=0
 x/=1;w=bitwidth
 if(x<0){
   if(w==0){scale=os;return -1}
   scale=os
   return -bitrev(-x-1)-1 #not(bitrev(not(x)))
 }
 if(w)x%=2^w
 z=0;for(;x||w>0;w--){z=z*2+(x%2);x/=2}
 scale=os;return(z)
}

# Perform a LEFT-SHIFT of x by n places
define shl(x,n) {
 auto os,w,s; x+=checkbitwidth_()
 if(n<0)return shr(x,-n)
 s=1;if(x<0)x*=(s=-1)
 os=scale;scale=0
  x/=1;x*=2^(n/1)
  if(bitwidth)if(x>=(w=2^bitwidth))x%=w
 scale=os;return s*x
}

# Perform a RIGHT-SHIFT of x by n places
define shr(x,n) {
 auto os
 if(n<0)return shl(x,-n)
 os=scale;scale=0
  x/=2^(n/1)
 scale=os;return x
}

define rol(x,n) {
  auto os,s,w,t; x+=checkbitwidth_();
  if(n<0)return ror(x,-n);
  os=scale;scale=0
   x/=1;if(w=bitwidth)n%=w
   s=1;if(x<0){x=-1-x;s=-1}
   x*=2^(n/1)
   if((w=2^w)==1){
     if(s<0)x=-1-x;
     scale=os;return x
   }
   t=x%w;x=t+(x-t)/w
   if(s<0)x=w-1-x
   if(x>=w/2)x-=w
  scale=os;return x;
}

define ror(x,n) {
  auto os,s; x+=checkbitwidth_();
  if(n<0)return rol(x,-n);
  if(bitwidth)return rol(x,bitwidth-n)
  os=scale;scale=0
   x/=1;n=2^(n/1)
   s=1;if(x<0){x=-1-x;s=-1}
   if(x%n){
     # low order 1s cannot roll to infinite high order positions where
     # 0s should be without invoking a class of infinities
     print "ror: can't rotate low order bits to infinity\n"
     scale=os;return s*(A^scale-1)
   }
   x/=n
   if(s<0)x=-1-x
  scale=os;return x
}

## Gray Code

# Convert a value to its graycode equivalent
define graycode(x) {
  auto n;
  n=0;if(x<0){n=1;x=-1-x}
  x=xor(x,x/2)
  if(n)x=-1-x
  return x
}

# Inverse of graycode
define inverse_graycode(x) {
  auto os,n,a[],b,i,y
  os=scale;scale=0
   x/=1;n=0;if(x<0){n=1;x=-1-x}
   for(i=0;x;x/=2)a[i++]=x%2
   y=0;b=0;for(i-=1;i>=0;i--)y=2*y+(b=(b!=a[i]))
   if(n)y=-1-y
  scale=os;return y
}

## 'Multiplication'

# NB: none of these are equivalent to nim multiplication

# Perform bitwise logical OR 'multiplication' of x and y
define orm(x,y){
  auto os,s,z;
  os=scale;scale=0
  x/=1;y/=1;s=1;if(x<0){x*=-1;s*=-1};if(y<0){y*=-1;s*=-1}
  z=0;while(y){if(y%2)z=or(z,x);x*=2;y/=2}
  scale=os;return s*z
}

# Perform bitwise logical EXCLUSIVE-OR 'multiplication' of x and y
define xorm(x,y){
  auto os,s,z;
  os=scale;scale=0
  x/=1;y/=1;s=1;if(x<0){x*=-1;s*=-1};if(y<0){y*=-1;s*=-1}
  z=0;while(y){if(y%2)z=xor(z,x);x*=2;y/=2}
  scale=os;return s*z
}

# Perform bitwise logical AND 'multiplication' of x and y
#   note use of initial z=-1 rather than z=0 to guarantee
#   best chance of nonzero result
define andm(x,y){
  auto os,s,z;
  os=scale;scale=0
  x/=1;y/=1;s=1;if(x<0){x*=-1;s*=-1};if(y<0){y*=-1;s*=-1}
  z=-1;while(y){if(y%2)z=and(z,x);x*=2;y/=2}
  scale=os;return s*z
}

## Floating point

# Workhorse for the below; Bitwise multiplier
bw_mult_ml_ = 1
bw_mult_sc_ = 0
define bw_mult_(sc) {
  if(bw_mult_sc_!=sc)bw_mult_ml_=2^bitwidth(A^(bw_mult_sc_=sc))
  return 8*bw_mult_ml_
}

sfpr_check_mod_ = 2^5 # power of two = number of bits to warn on
sfpr_check_max_ = sfpr_check_mod_*(.5*sfpr_check_mod_+1)-1 #1000011111

# Set to 0 to stop warnings about sfprs
sfpr_warn = 1

# Check if x contains a secondary floating point representation of a number
# e.g. 0.11111... = sfpr of 1.00000...
define is_sfpr_(x) {
  if(x==0)return 0;
  x/=sfpr_check_mod_
  if(x<0)x*=-1;
  if(x>=sfpr_check_max_)
   if(x%sfpr_check_mod_==sfpr_check_mod_-1)
     return 1;
  return 0;
}

# used to check whether parameters and output are sfprs
define is_any_sfpr3_(x,y,z) {
  if(sfpr_warn){
   if(is_sfpr_(x))return 1;
   if(is_sfpr_(y))return 1;
   if(is_sfpr_(z))return 1;
  }
  return 0;
}

define sfpr_warn_msg_() {
  print ": 2ndary fp representation of rational\n"
  return 0;
}

# Perform XOR on binary floating point representations of x and y
define xorf(x,y){
 auto os,t
 os=scale;scale=0
  t=bw_mult_(os);x*=t;y*=t
  z=xor(x,y)
  if(is_any_sfpr3_(x,y,z)){print "xorf";x+=sfpr_warn_msg_()}
 scale=os;return( z/t )
}

# Perform OR on binary floating point representations of x and y
define orf(x,y){
 auto os,t,z;
 os=scale;scale=0
  t=bw_mult_(os);x*=t;y*=t
  z=or(x,y)
  if(is_any_sfpr3_(x,y,z)){print "orf";x+=sfpr_warn_msg_()}
 scale=os;return( z/t )
}

# Perform AND on binary floating point representations of x and y
define andf(x,y){
 auto os,t,z;
 os=scale;scale=0
  t=bw_mult_(os);x*=t;y*=t
  z=and(x,y)
  if(is_any_sfpr3_(x,y,z)){print "andf";x+=sfpr_warn_msg_()}
 scale=os;return( z/t )
}

## Floating point + 'Multiplication'

# Perform XOR-M on binary floating point representations of x and y
define xormf(x,y){
 auto os,t,z;
 os=scale;scale=0
  t=bw_mult_(os);x*=t;y*=t;t^=2
  z=xorm(x,y)
  if(is_any_sfpr3_(x,y,z)){print "xormf";x+=sfpr_warn_msg_()}
 scale=os;return( z/t )
}

# Perform OR-M on binary floating point representations of x and y
define ormf(x,y){
 auto os,t,z;
 os=scale;scale=0
  t=bw_mult_(os);x*=t;y*=t;t^=2
  z=orm(x,y)
  if(is_any_sfpr3_(x,y,z)){print "ormf";x+=sfpr_warn_msg_()}
 scale=os;return( z/t )
}

# Perform AND-M on binary floating point representations of x and y
define andmf(x,y){
 auto os,t,z;
 os=scale;scale=0
  t=bw_mult_(os);x*=t;y*=t;t^=2
  z=andm(x,y)
  if(is_any_sfpr3_(x,y,z)){print "andmf";x+=sfpr_warn_msg_()}
 scale=os;return( z/t )
}

## Gray Code + Floating Point

define graycodef(x) {
 auto os,t,z;
 os=scale;scale=0
  t=bw_mult_(os);x*=t
  z=graycode(x)
  if(is_any_sfpr3_(x,0,z)){print "graycodef";x+=sfpr_warn_msg_()}
 scale=os;return( z/t )
}

define inverse_graycodef(x) {
 auto os,t,z;
 os=scale;scale=0
  t=bw_mult_(os);x*=t
  z=inverse_graycode(x)
  if(is_any_sfpr3_(x,0,z)){print "inverse_graycodef";x+=sfpr_warn_msg_()}
 scale=os;return( z/t )
}