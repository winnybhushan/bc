### Primes.BC - Primes and factorisation (rudimentary)

# Primality testing

# workhorse function for int_modpow
define int_modpow_(x,y,m) {
  auto r, y2;
  if(y==0)return(1)
  if(y==1)return(x%m)
  y2=y/2
  r=int_modpow_(x,y2,m); if(r>=m)r%=m
  r^=2                 ; if(r>=m)r%=m
  if(y%2){r*=x         ; if(r>=m)r%=m}
  return( r )
}

# Raise x to the y-th power, modulo m
define int_modpow(x,y,m) {
  auto os;
  os=scale;scale=0
  x/=1;y/=1;m/=1
  if(x< 0){print "int_modpow error: base is negative\n";    x*=-1}
  if(y< 0){print "int_modpow error: exponent is negative\n";y*=-1}
  if(m< 0){print "int_modpow error: modulus is negative\n"; m*=-1}
  if(m==0){print "int_modpow error: modulus is zero\n";  return 0}
  x=int_modpow_(x,y,m)
  scale=os
  return( x )
}

define is_rabin_miller_pseudoprime(p) {
  auto os,a,inc,next_a,k,q,r,s,x;
  os=scale;scale=0
  if(p!=p/1){scale=os;return 0}
  if(p<=3){scale=os;return(p==2||p==3)}
  s=0;d=q=p-1;while(d%2==0){s+=1;d/=2}
  inc=(p-4)/(12+length(p));if(inc<1)inc=1
  for(a=2;a<q;a+=inc){
    next_a=0
    x=int_modpow_(a,d,p)
    if(x!=1&&x!=q){
      for(r=1;r<s;r++){
       x^=2;x%=p
       if(x==1){scale=os;return 0}#composite
       if(x==q){next_a=1;break}
      }#end for
      if(!next_a){scale=os;return 0}
    }#end if
  }#end for
  scale=os;return 1
}

# Determine whether p is a Perrin pseudoprime
#   returns 0 if definitely composite
#   returns 1 if possibly prime (but not definitely)
define is_perrin_pseudoprime(p) {
  auto os,i,f,mod,m[],r[],t[],rp,b;
  os=scale;scale=0
  if(p!=p/1){scale=os;return 0}
  mod=p;
  if(p<1){scale=os;return 0}
  #set rp to reverse of p, set b to number of zeroes at end of p in binary
  # would love to use int_modpow to calculate powers but it doesn't work
  #  on matrices!
  # could use an array to store bits of p, but arrays are limited to
  #  65536 elements; integers have no such limits 
  rp=0;b=1;f=1;while(p){i=p%2;if(i)f=0;if(f)b+=1;rp=2*rp+p%2;p/=2}
  # m[]={0,1,1;1,0,0;0,1,0}
  m[0]=0; m[1]=1; m[2]=1;
  m[3]=1; m[4]=0; m[5]=0;
  m[6]=0; m[7]=1; m[8]=0;
  # r[]={1,0,0;0,1,0;0,0,1}=Unit
  r[0]=1; r[1]=0; r[2]=0;
  r[3]=0; r[4]=1; r[5]=0;
  r[6]=0; r[7]=0; r[8]=1;
  while(rp||b) {
    # square r
    t[0]=r[1]*r[3]; t[1]=r[2]*r[6]; t[2]=r[0]+r[4]
    t[3]=r[2]*r[7]; t[4]=r[0]+r[8]
    t[5]=r[1]*r[5]; t[6]=r[5]*r[6]; t[7]=r[5]*r[7]; t[8]=r[4]+r[8]
    t[9]=r[2]*r[3]; t[A]=r[3]*r[7]; t[B]=r[1]*r[6]
    r[0]^=2;r[0]+=t[0]+t[1]; r[1]*=t[2];r[1]+=t[3]; r[2]*=t[4];r[2]+=t[5]
    r[3]*=t[2];r[3]+=t[6]; r[4]^=2;r[4]+=t[0]+t[7]; r[5]*=t[8];r[5]+=t[9]
    r[6]*=t[4];r[6]+=t[A]; r[7]*=t[8];r[7]+=t[B]; r[8]^=2;r[8]+=t[1]+t[7]
    if(rp%2){# odd
      # multiply r by m
      #  this is a hack that assumes m is {0,1,1;1,0,0;0,1,0}
      #  without actually using m.
      #  if m is changed, this will need to be rewritten
      t[0]=r[0]+r[2]; t[1]=r[3]+r[5]; t[2]=r[6]+r[8]
      r[2]=r[0]; r[0]=r[1]; r[1]=t[0]
      r[5]=r[3]; r[3]=r[4]; r[4]=t[1]
      r[8]=r[6]; r[6]=r[7]; r[7]=t[2]
    }
    for(i=0;i<9;i++)r[i]%=mod
    rp/=2;if(!rp)b-=1
  }
  r[0]=(2*r[6]+3*r[8])%mod
  scale=os;
  return (r[0]==0)
}

# Determine whether x is possibly prime through division by small numbers
define is_small_division_pseudoprime(x) {
 auto os,j[],ji,sx,p,n;#oldscale,jump,jump-index,sqrtx,prime,nth
 if(x<2)return 0;
 os=scale;scale=0
 if(x!=x/1){scale=os;return 0}
 j[0]=4;j[1]=2;j[2]=4;j[3]=2;j[4]=4;j[5]=6;j[6]=2;j[7]=6
 for(p=2;p<7;p+=p-1){if(x==p){scale=os;return 1};if(x%p==0){scale=os;return 0}}
 sx=sqrt(x);if(sx>(n=A^5))sx=n;# 100000(decimal) upper limit
 if(prime[A^4]){ #primes-db is present
   for(n=4;(p=prime[n])<=sx;n++)if(x%p==0){scale=os;return 0}
 } else {
   ji=7;p=7;n=2*A-1
   while(p<=sx){
    if(x%p==0){scale=os;return 0}
    p+=j[ji=(ji+1)%8];if(p>n)while(p%7==0||p%B==0||p%D==0||p%n==0)p+=j[ji=(ji+1)%8]
   }
 }
 scale=os;return(1)
}

define is_prime(x) {
  # It is estimated that numbers of 300 digits or fewer
  #  will not be misidentified using the three tests below
  if(!is_small_division_pseudoprime(x))return 0
  if(x<A^A)return 1 # pairs with the A^5 in is_s.d.pp()
  if(!is_rabin_miller_pseudoprime(x))return 0
  if(!is_perrin_pseudoprime(x))return 0
  return 1
}

# Determine whether x is prime through trial division only
define is_prime_td(x) {
 auto os,j[],ji,sx,p,n;#oldscale,jump,jump-index,sqrtx,prime,nth
 if(x<2)return 0;
 os=scale;scale=0
 if(x!=x/1){scale=os;return 0}
 j[0]=4;j[1]=2;j[2]=4;j[3]=2;j[4]=4;j[5]=6;j[6]=2;j[7]=6
 for(p=2;p<7;p+=p-1){if(x==p){scale=os;return 1};if(x%p==0){scale=os;return 0}}
 if(!is_perrin_pseudoprime(x)){scale=os;return 0}#cheat a bit
 sx=sqrt(x);p=7;ji=7
 if(prime[4^8-1])for(n=4;n<4^8&&(p=prime[n])<=sx;n++)if(x%p==0){scale=os;return 0}
 if(p>7)ji=4#assume p is now prime[4^8-1]
 n=2*A-1
 while(p<=sx){
  if(x%p==0){scale=os;return 0}
  p+=j[ji=(ji+1)%8];if(p>n)while(p%7==0||p%B==0||p%D==0||p%n==0)p+=j[ji=(ji+1)%8]
 }
 scale=os;return(1)
}

# Determine whether x is y-th power-free
#  e.g. has_freedom(51, 2) will return whether 51 is square-free
#  Special case: has_freedom(x, 1) returns whether x is prime
define has_freedom(x,y) {
 auto os,j[],ji,p,py,n;#oldscale,jump,jump-index,prime,nth
 os=scale;scale=0
 if(x!=x/1){scale=os;return 0}
 if(y==1){return is_prime(x)}
 if(x<0||y<1){return 0}
 j[0]=4;j[1]=2;j[2]=4;j[3]=2;j[4]=4;j[5]=6;j[6]=2;j[7]=6
 for(p=2;p<7;p+=p-1){
   if(x==p){scale=os;return 1}
   if(x%(p^y)==0){scale=os;return 0}
 }
 ji=7;p=7
 if(prime[4^8-1])for(n=4;n<4^8&&(py=(p=prime[n])^y)<=x;n++){
   if(x==p){scale=os;return 1}
   if(x%py==0){scale=os;return 0}
 }
 if(p>7)ji=4#assume p is now prime[4^8-1]
 py=p^y;n=2*A-1
 while(py<=x){
  if(x%py==0){scale=os;return 0}
  p+=j[ji=(ji+1)%8];if(p>n)while(p%7==0||p%B==0||p%D==0||p%n==0)p+=j[ji=(ji+1)%8]
  py=p^y
 }
 scale=os;return(1)
}

# Workhorse function for the below
define fac_print_(x,p) {
  auto c;#count
  c=0;while(x%p==0){c+=1;x/=p}
  if(c){
    print p;if(c>1){print "^",c};print "*\\\n"
    if(is_prime(x)){print x,"*\\\n";return -x}
  }
  return x
}

# Output the prime factors of x
define fac(x) {
 auto os,j[],ji,sx,p,n;#oldscale,jump,jump-index,sqrtx,prime,nth
 os=scale;scale=0;x/=1
 if(x<0){print"-1*\\\n";x*=-1}
 if(x==0){return 0}
 if(is_prime(x)){print x,"*\\\n";scale=os;return 1}
 j[0]=4;j[1]=2;j[2]=4;j[3]=2;j[4]=4;j[5]=6;j[6]=2;j[7]=6
 for(p=2;p<7;p+=p-1){
  if((x=fac_print_(x,p))<2){scale=os;return 1}
 }
 sx=sqrt(x);p=7;ji=7
 if(prime[4^8-1])
  for(n=4;n<4^8&&(p=prime[n])<=sx;n++)
   if((x=fac_print_(x,p))<2){scale=os;return 1}
 if(p>7)ji=4#assume p is now prime[4^8-1]
 n=2*A-1;sx=sqrt(x)
 while(p<=sx){
  if((x=fac_print_(x,p))<2){scale=os;return 1}
  p+=j[ji=(ji+1)%8];if(p>n)while(p%7==0||p%B==0||p%D==0||p%n==0)p+=j[ji=(ji+1)%8]
 }
 if(x>1)print x,"*\\\n"
 scale=os;return(1)
}

# Fill the global prime[] array with g primes

## Defunct function. Load primes-db.bc instead

#define genprimes(g) {
# auto os,j[],ji,i,x,sx,ns,p,p2,pflag
# #os-oldscale,j[]-jumps,ji-jumpindex,i-primeindex,x-primecandidate
# #sqrtofx,nextsquare,p-prime,pflag-is.x.prime?
# os=scale;scale=0
# j[0]=4;j[1]=2;j[2]=4;j[3]=2;j[4]=4;j[5]=6;j[6]=2;j[7]=6
# prime[0]=1;prime[1]=2;prime[2]=3;prime[3]=5;prime[4]=7;primetop=4
# if(g<A^2)g=A^2;i=4^8-1
# if(g>i){
#   g=i
#   print "Can only generate a maximum of ",i," primes\n"
# }
# if(prime[g]>0){scale=os;return prime[g]}
# print "Please wait...\n"
# for(i=primetop+1;i<=g;i++)prime[i]=0
# ji=0;x=B;sx=3;ns=4^2
# while(primetop<g){
#  i=2;p=prime[i];pflag=1
#  while(p<=sx){
#   if(x%p==0){pflag=0;break}
#   p=prime[i+=1]
#  }
#  if(pflag){
#    prime[primetop+=1]=x
#    if(primetop%((5*A)^2)==0)print " ",primetop,"..."
#    if(primetop%(F*A^3)==0)print "\n"
#  }
#  x+=j[ji=(ji+1)%8];if(x>=ns)ns+=sx+(sx+=1)
# }
# scale=os;return(prime[primetop])
#}

# Finds and returns the nearest prime > x
define nextprime(x) {
  auto os,ox;
  if(x<0)return -prevprime(-x)
  if(x<2)return 2
  if(x<3)return 3
  os=scale;scale=0
   ox=x
   if(x/1<x){x+=1} #ceiling
   x/=1            #truncate
   x+=1-x%2        #make odd
   if(x==ox)x+=2   #same as we started with
   while(!is_prime(x))x+=2 # could use jumps here, but is not much faster
  scale=os;return x
}

# Finds and returns the nearest prime < x
define prevprime(x) {
  auto os;
  if(x<0)return -nextprime(-x)
  if(x<=2)return -2
  if(x<=3)return 2
  if(x<=5)return 3
  os=scale;scale=0
   ox=x;x/=1
   if(x%2){if(x==ox)x-=2}else{x-=1}
   while(!is_prime(x)&&x>0)x-=2
   if(x<2)return x=-2
  scale=os;return x
}

# Find the nearest prime to x (inclusive)
define nearestprime(x) {
  auto np,pp;
  if(is_prime(x))return x;
  np=nextprime(x)
  pp=prevprime(x)
  if(np-x>x-pp)return pp
  return np
}

# Primorial  
define primorial(n) {
  auto i,pm,p;
  #lb=73*sqrt(n)#needs improvement
  #lb=genprimes(lb)
  pm=1;p=2
  if(prime[4^8-1])for(i=1;i<4^8&&p=prime[i]<=n;i++)pm*=p
  for(;p<=n;p=nextprime(p))pm*=p
  return pm
}
